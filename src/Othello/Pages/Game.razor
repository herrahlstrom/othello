@using Othello.Engine;

@if (_exception != null)
{
    <h6 class="text-secondary">@_exception.GetType()</h6>
    <h2 class="text-danger">@_exception.Message</h2>
    <text>@_exception.StackTrace</text>
}

@if (Model is { } game)
{
    <div class="players">
        @foreach (var player in Players)
        {
            <div class="player @(player.Color.ToString().ToLower()) @(game.CurrentPlayer == player.Color ? "current":"")">
                <div class="name">@player.Name</div>
                <div class="points">@player.Points</div>
                <div class="icon"></div>
            </div>
        }
    </div>

    <div class="o-content">
        <div class="o-table">
            @for (int i = 0; i < 64; i++)
            {
                int index = i;
                <div class="o-cell">
                    @if (game.Table[index] is null)
                    {
                        <button @onclick="()=>OnPlaceButtonClick(index)" class="@(_errorCells.Contains(i)?"error":"")"></button>
                    }
                    else
                    {
                        string whiteCssStatus = game.Table[index].Equals(Othello.Engine.PlayerColor.White) ? "up" : "down";
                        string blackCssStatus = game.Table[index].Equals(Othello.Engine.PlayerColor.Black) ? "up" : "down";
                        <div class="stone white @(whiteCssStatus)"></div>
                        <div class="stone black @(blackCssStatus)"></div>
                    }
                </div>
            }
        </div>
    </div>
}

@code {
    private void OnPlaceButtonClick(int index)
    {
        if (CurrentPlayer.Ai) { return; }
        PlaceStone(index);
    }
}